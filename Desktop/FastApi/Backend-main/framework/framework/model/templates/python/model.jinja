{% if input.indexes -%}
'''async def {{input.name}}Index():
    {%- for index in input.indexes %}
    {{index.render()}}
    {%- endfor -%}
    {# Unique indexes created for 1-1 and 1-N relationships #}
{# {% for ref in input.references %}
    {{ref.render()}}
{%- endfor -%} #}'''
{%- endif %}

{% if input.references -%}
{% for ref in input.references -%}
class {{ref.model.name}}{{input.name}}Ref(pydantic.BaseModel):
    id: str
    {% if ref.attrs -%}
    {% for attr in ref.attrs -%}
    {% set x = attr.optional -%}
    {% set _ = attr.__dict__.update({'optional': True})-%}
    {{attr.render()}}
    {% set _ = attr.__dict__.update({'optional': x})-%}
    {%- endfor %}

    async def load(self):
        data = await {{ref.model.name}}.get(self.id)
        return super().__init__(**data.dict())
    {% endif %}
{% endfor -%}
{% endif %}

class {{input.name}}Create({{input.dbbase[1]}}):
    {%- for attr in input.attrs %}
    {{attr.render()}}
{%- endfor %}

    {% if not input.is_internal -%}
    class Config:
        collection_name = '{{input.config.collection_name or input.name.lower()}}'
        db_collection = '{{input.name.lower()}}'
        {% if input.config.def_query %}def_query = '{{input.config.def_query or ""}}' {% endif %}
        {% if input.config.filterkey %}filterkey = '{{input.config.filterkey or ""}}' {% endif %}
    {% endif %}
    {% if input.references -%}
    async def load_refs(self):
    {% set ns = namespace(noop=True) %}
    {%- for ref in input.references -%}
    {%- if ref.attrs and ref.relation == '1-1' %}
    {%- set ns.noop = False %}
        await self.{{ref.model.name.lower()}}_ref.load() if self.{{ref.model.name.lower()}}_ref else ...
    {%- elif ref.attrs %}
    {%- set ns.noop = False %}
        [await x.load() for x in self.{{ref.model.name.lower()}}_ref] if {{ref.model.name.lower()}}_ref else ...
    {% endif -%}
    {% endfor -%}
    {% if ns.noop == True %}
        pass
    {% endif %}
    {% endif %}

{% if not input.is_internal -%}
class {{input.name}}({{input.dbbase[2]}}):
    {%- for attr in input.attrs %}
    {% set x = attr.optional -%}
    {% set _ = attr.__dict__.update({'optional': True})-%}
    {{attr.render()}}
    {%- set _ = attr.__dict__.update({'optional': x})-%}
{%- endfor %}
    {% if not input.is_internal %}
    class Config:
        collection_name = '{{input.config.collection_name or input.name.lower()}}'
        db_collection = '{{input.name.lower()}}'
        {% if input.config.def_query %}def_query = '{{input.config.def_query or ""}}' {% endif %}
        {% if input.config.filterkey %}filterkey = '{{input.config.filterkey or ""}}' {% endif %}
    {% endif %}

    {% if input.references %}
    async def load_refs(self):
    {% set ns = namespace(noop=True) %}
    {%- for ref in input.references %}
    {%- if ref.attrs and ref.relation == '1-1' %}
    {%- set ns.noop = False %}
        await self.{{ref.model.name.lower()}}_ref.load() if self.{{ref.model.name.lower()}}_ref else ...
    {%- elif ref.attrs %}
    {%- set ns.noop = False %}
        [await x.load() for x in self.{{ref.model.name.lower()}}_ref] if self.{{ref.model.name.lower()}}_ref else ...
    {%- endif %}
    {% endfor -%}
    {% if ns.noop == True %}
        pass
    {% endif %}

    {% endif -%}

    {% if input.reverseRef %}
    async def update_refs(self):
        ...
    {% set ns = namespace(noop=True) %}
    {% for ref in input.reverseRef -%}
    {%- for reverseref in ref.references -%}
    {%- if reverseref.model.name == input.name and reverseref.attrs -%}
    {%- set ns.noop = False %}
        '''ins = {{input.name}}{{ref.name}}Ref(id=self.id)
        ins.load()
        data = ins.dict()
        if not data:
            return
        {% if reverseref.relation == '1-1' -%}
        query = {"query": {"bool": {"must": [{"match": {"{{input.name.lower()}}_ref.id.keyword": self.id}}]}}}
        inlineScript = []
        for key, value in json.loads(json.dumps(data)).items():
            tmp_value = f"'{value}'" if isinstance(value, str) else value
            inlineScript.append(f"ctx._source.{{input.name.lower()}}_ref.{key}={tmp_value}")
        query['script'] = {"inline": ";".join(inlineScript), "lang": "painless"}
        indexName = Inventory.collection_name()
        client = await Inventory.client()
        await client.update_by_query(index=indexName, body=query)
        {% else -%}
        await {{ref.name}}.update({ "{{input.name.lower()}}_ref.id": self.id }, {"{{input.name.lower()}}_ref.$":data.dict()})
        {% endif -%}
        '''
    {% endif -%}
    {% endfor -%}
    {% endfor -%}
    {% if ns.noop == True %}
        pass
    {% endif %}
    {% endif %}

    {% if not input.config.nocascadedelete and input.reverseRef %}
    async def delete(self, id):
        # Generate Cascade delete in {{input.name}} for below:
        {% for ref in input.reverseRef -%}
        # Delete {{ref.name}}
        await {{ref.name}}.delete_bulk({'{{input.name.lower()}}_ref.id': id})
        {% endfor %}
        await super().delete(id)
    {% endif %}


class {{input.name}}GetResp(pydantic.BaseModel):
    data: typing.List[{{input.name}}]
    total: int = pydantic.Field(0)
    count: int = pydantic.Field(0)


class {{input.name}}BulkDelete(pydantic.BaseModel):
    ids: typing.List[str]


{%- for action in input.actions %}
class {{action.name}}Params(pydantic.BaseModel):
    {% for param in action.params -%}
    {{param.render()}}
    {% endfor %}
    {% if not action.params %}
    pass
    {% endif %}
{%- endfor %}

{% endif %}
